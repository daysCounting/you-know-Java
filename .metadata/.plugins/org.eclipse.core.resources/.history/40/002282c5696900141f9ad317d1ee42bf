package c08;


interface Compare { 
  boolean lessThan(Object lhs, Object rhs); 
  boolean lessThanOrEqual(Object lhs, Object rhs); 
} ///: ̄ 
 
对这两种方法来说,lhs 代表本次比较中的“左手”对象,而 rhs 代表“右手”对象。 
可创建 Vector 的一个子类,通过 Compare 实现“快速排序”。对于这种算法,包括它的速度以及原理等等,
在此不具体说明。欲知详情,可参考 Binstock 和 Rex 编著的《Practical Algorithms for Programmers》,
由 Addison-Wesley 于 1995 年出版。 
 
//: SortVector.java 
// A generic sorting vector 
package c08; 
import java.util.*; 
 
public class SortVector extends Vector { 
  private Compare compare; // To hold the callback 
  public SortVector(Compare comp) { 
    compare = comp; 
  } 
  public void sort() { 
    quickSort(0, size() - 1); 
  } 
  private void quickSort(int left, int right) { 
    if(right > left) { 
      Object o1 = elementAt(right); 
      int i = left - 1; 
      int j = right; 
      while(true) { 
        while(compare.lessThan( 
              elementAt(++i), o1)) 
          ; 
        while(j > 0) 
          if(compare.lessThanOrEqual( 
             elementAt(--j), o1))  
 
229            break; // out of while 
        if(i >= j) break; 
        swap(i, j); 
      } 
      swap(i , right); 
      quickSort(left, i-1); 
      quickSort(i+1, right); 
    } 
  } 
  private void swap(int loc1, int loc2) { 
    Object tmp = elementAt(loc1); 
    setElementAt(elementAt(loc2), loc1); 
    setElementAt(tmp, loc2); 
  } 
} ///: ̄ 